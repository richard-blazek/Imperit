@inject Services.IActionLoader actions;
@inject Services.ISettingsLoader sl;

@code{
	[Parameter] public Action Return { get; set; } = (() => { });
	[Parameter] public Land? Land { get; set; }
	[Parameter] public Player? Player { get; set; }
	RecruitModel model = new RecruitModel();
	protected override void OnInitialized()
	{
		model.SoldierTypes = Player!.SoldierTypes.Where(type => type.IsRecruitable(Land!)).ToArray();
		model.Soldiers = new IntModel[model.SoldierTypes.Length];
		for (int i = 0; i < model.Soldiers.Length; ++i)
		{
			model.Soldiers[i] = new IntModel();
		}
	}
	Soldiers RecruitedSoldiers => new Soldiers(model.Soldiers.Select((count, i) => (model.SoldierTypes[i], count.Value)));
	int Price => RecruitedSoldiers.Price;
	int Missing => Math.Max(0, Price - Player!.Money);
	void DoRecruit()
	{
		if (model.Borrow && Missing > 0)
		{
			actions.Add(new Borrow(Player!.Id, Missing, sl.Settings));
		}
		if (actions.Add(new Recruit(Player!.Id, Land!.Id, new Army(RecruitedSoldiers, Player!))))
		{
			Return();
		}
	}
}
<nav>
	<a @onclick="Return">Zrušit</a>
	<a class="this">Verbování</a>
</nav>
<main>
	<EditForm Model="@model" OnValidSubmit="DoRecruit">
		<DataAnnotationsValidator /><ValidationSummary />
		<p>
			@Land!.Name
			@if (Land!.Soldiers.Any)
			{
				<text>má <SoldiersByType Soldiers="@Land!.Soldiers" /></text>
			}
			else
			{
				<text>nemá žádné vojáky</text>
			}
		</p>
		<table>
			@foreach (var (i, type) in model.SoldierTypes.Enumerate())
			{
				<tr>
					<td>@type.Name (@(type.Price)@(Sym.Money)/@type.Symbol)</td>
					<td><InputNumber @bind-Value="model.Soldiers[i].Value" autofocus /></td>
				</tr>
			}
			@if (Missing > 0)
			{
				<tr><td colspan="2">Chybí ti @(Missing)@Sym.Money</td></tr>
				<tr>
					<td>Verbovat na dluh</td>
					<td><InputCheckbox @bind-Value="model.Borrow" /></td>
				</tr>
			}
			else
			{
				model.Borrow = false;
			}
			<tr><td></td><td><button type="submit">Verbovat</button></td></tr>
		</table>
	</EditForm>
</main>